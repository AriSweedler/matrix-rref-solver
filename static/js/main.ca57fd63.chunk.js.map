{"version":3,"sources":["Matrix.js","InputControls.js","App.js","index.js"],"names":["Matrix","changeMatrix","value","row","col","_this","props","alterCell","myValues","this","values","myMatrix","length","push","react_default","a","createElement","Matrix_Row","key","index","displayOnly","alterMatrix","changed","className","message","React","Component","Row","changeRow","_this2","myRow","Matrix_Square","alterRow","Square","changeSquare","event","_this3","target","isNaN","type","disabled","onChange","InputControls","decrementRow","controlsUsed","rows","cols","incrementRow","newValue","decrementCol","incrementCol","changeCol","zeroAll","onClick","cloneMatrix","input","output","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","arr","slice","err","return","App","state","allValues","matrixSizeChange","newRows","newCols","newValues","Array","fill","r","setState","changeCellValue","addWork","description","changedRow","shownWork","src_Matrix","concat","workStep","nextStep","rref","_loop","rVal","map","item","_loop2","c","zeroRow","zeroVals","i","finalAnswer","src_InputControls","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ca57fd63.chunk.js","sourcesContent":["import React from 'react';\n\nclass Matrix extends React.Component {\n  changeMatrix = (value, row, col) => {\n    this.props.alterCell(value, row, col);\n  }\n\n  render() {\n    let myValues = this.props.values;\n    let myMatrix = [];\n    for(let row = 0; row < myValues.length; row++){\n      myMatrix.push(\n        <Row\n          key={row}\n          index={row}\n          displayOnly={this.props.displayOnly}\n          values={myValues[row]}\n          alterMatrix={this.changeMatrix}\n          changed={this.props.changed===row}\n        />\n      );\n    }\n    return (\n      <div className=\"Matrix\">\n        <div>{this.props.message}</div>\n        <div>{myMatrix}</div>\n      </div>\n    );\n  }\n}\n\nclass Row extends React.Component{\n  changeRow = (value, col) => {\n    this.props.alterMatrix(value, this.props.index, col);\n  }\n\n  render() {\n    let myValues = this.props.values;\n    let myRow = [];\n    for(let col = 0; col < myValues.length; col++){\n      myRow.push(\n        <Square\n          key={col}\n          index={col}\n          displayOnly={this.props.displayOnly}\n          value={myValues[col]}\n          alterRow={this.changeRow}\n          changed={this.props.changed}\n        />\n      );\n    }\n    let className = \"Row\";\n    if (this.props.changed) {\n      className += \" changed\";\n    }\n    return (<div className={className}>{myRow}</div>);\n  }\n\n}\n\nclass Square extends React.Component{\n  changeSquare = (event) => {\n    this.props.alterRow(event.target.value, this.props.index);\n  }\n\n  render() {\n    var className=\"Cell\";\n    if (isNaN(this.props.value)) {\n      className += \" NaN\";\n    }\n    if (this.props.changed) {\n      className += \" changed\";\n    }\n    return (\n      <input\n        className={className}\n        type=\"text\"\n        value={this.props.value}\n        disabled={this.props.displayOnly}\n        onChange={this.changeSquare}\n      />\n    );\n  }\n\n}\n\nexport default Matrix;\n","import React from 'react';\n\nclass InputControls extends React.Component {\n  decrementRow = () => {\n    //console.log(\"Row minus\");\n    this.props.controlsUsed(this.props.rows-1, this.props.cols);\n  }\n\n  incrementRow = () => {\n    //console.log(\"Row plus\");\n    this.props.controlsUsed(this.props.rows+1, this.props.cols);\n  }\n\n  changeRow = (event) => {\n    var newValue = event.target.value;\n    this.props.controlsUsed(newValue, this.props.cols);\n  }\n\n  decrementCol = () => {\n    //console.log(\"Col minus\");\n    this.props.controlsUsed(this.props.rows, this.props.cols-1);\n  }\n\n  incrementCol = () => {\n    //console.log(\"Col plus\");\n    this.props.controlsUsed(this.props.rows, this.props.cols+1);\n  }\n\n  changeCol = (event) => {\n    var newValue = event.target.value;\n    this.props.controlsUsed(this.props.rows, newValue);\n  }\n\n  zeroAll = () => {\n    this.props.zeroAll();\n  }\n\n  render() {\n    return (\n      <div className=\"InputControls\">\n        <div>\n          <button onClick={this.decrementRow}>Row-1</button>\n          <input onChange={this.changeRow} value={this.props.rows} />\n          <button onClick={this.incrementRow}>Row+1</button>\n        </div>\n        <div>\n          <button onClick={this.decrementCol}>Col-1</button>\n          <input onChange={this.changeCol} value={this.props.cols} />\n          <button onClick={this.incrementCol}>Col+1</button>\n        </div>\n        <div>\n          <button onClick={this.zeroAll}>Reset values</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InputControls;","import React from 'react';\nimport Matrix from './Matrix.js';\nimport InputControls from './InputControls.js';\nimport './matrixStyles.css';\n\n//we don't want no references here\nfunction cloneMatrix(input) {\n  var output = [];\n  for (let arr of input) {\n    output.push(arr.slice())\n  }\n  return output;\n}\n\nclass App extends React.Component {\n  //hoist state to the App component\n  state = {\n    allValues: [[2, 6, 4], [1, 4, 5], [3, 7, 5]],\n    rows: 3,\n    cols: 3\n  }\n\n  //Changes the state of the rows/cols. Pushes numbers onto allValues if necesary.\n  matrixSizeChange = (newRows, newCols) => {\n    var newValues = cloneMatrix(this.state.allValues);\n\n    //if we added rows, then push enough rows filled with 0s to the end of this.state.allValues\n    while (newRows > newValues.length) {\n      newValues.push(Array(newCols).fill(0)); // [0, 0, 0, 0] if newCols = 4\n    }\n\n    //if we added cols, then:\n    //For each row: Push enough 0s to the end.\n    for(let r = 0; r < newRows; r++) {\n      while (newCols > newValues[r].length) {\n        newValues[r].push(0);\n      }\n    }\n\n    //update state\n    this.setState({\n      rows: newRows,\n      cols: newCols,\n      allValues: newValues\n    });\n  }\n\n  //Change a number in allValues\n  changeCellValue = (value, row, col) => {\n    var newValues = this.state.allValues.slice();\n    newValues[row][col] = value;\n    this.setState({\n      allValues: newValues\n    });\n  }\n\n  addWork = (description, changedRow) => {\n    this.shownWork.push(\n      <Matrix\n        message={`Step ${this.workStep}: ${description}`}\n        key={this.workStep++}\n        displayOnly={true}\n        values={cloneMatrix(this.nextStep)}\n        changed={changedRow}\n      />\n    );\n    // console.log(`Step ${this.workStep++}: ${description.substring(0, 19)}\\t...${values}.`)\n  }\n\n  //takes a matrix as input, and retuns the matrix in rref'd form. (All lines beginning in 'this.*' are for the purpose of recording work.)\n  rref = (input) => {\n    let col = 0;\n    let row = 0;\n    this.workStep = 0;\n    this.shownWork = [];\n    this.nextStep = cloneMatrix(input);\n    this.addWork(`Here is our original matrix.`, );\n    for(row = 0; row < this.state.rows; col++, row++) {\n\n      //do a step of work on the matrix \"this.nextStep\", then record.\n      let rVal = this.nextStep[row][col];\n      while (rVal === 0) {\n        col++;\n        rVal = this.nextStep[row][col];\n        if (col === this.state.cols) {break;}\n      }\n      if (rVal !== 1 && rVal) {\n        this.nextStep[row] = this.nextStep[row].map( (item) => (item /= rVal));\n        this.addWork(`Divide row ${row} by ${rVal}.`, row);\n      }\n\n      //do a step of work on the matrix \"this.nextStep\"\n      for(let r = row+1; r < this.state.rows; r++) {\n        let rVal = this.nextStep[r][col];\n        if (rVal) {\n          // eslint-disable-next-line\n          this.nextStep[r] = this.nextStep[r].map( (item, c) => (item -= this.nextStep[row][c]*rVal));\n          this.addWork(`Subtract ${rVal}*(row ${row}) from row ${r} in order to zero out (${r}, ${col}).`, r);\n        }\n      }\n    }\n\n    return this.nextStep;\n  }\n\n  zeroAll = () => {\n    const zeroRow = Array(this.state.cols).fill(0);\n    let zeroVals = [];\n    for(let i = 0; i < this.state.rows; i++) {\n      zeroVals.push(zeroRow.slice());\n    }\n    this.setState({allValues: zeroVals})\n  }\n\n  render() {\n    /*allValues records every cell the user inputs, and never forgets. But if we input a number then decrease the number\n    of columns such that we no longer see that number, we don't with to continue to display that number. The matrix \"values\"\n    takes care of this, by only recording the value we with to see. */\n    var values = [];\n    for(var i = 0; i < this.state.rows; i++) {\n      values.push(this.state.allValues[i].slice(0, this.state.cols));\n    }\n\n    //rref, and record both work & answer.\n    var finalAnswer = this.rref(values);\n    return (\n      <div className=\"myApp\">myApp\n        <div className=\"ioPanel\">ioPanel\n          <div className=\"userInput\">userInput\n            <InputControls\n              className=\"inputControls\"\n              controlsUsed={this.matrixSizeChange}\n              zeroAll={this.zeroAll}\n              rows={this.state.rows}\n              cols={this.state.cols}/>\n            <Matrix\n              alterCell={this.changeCellValue}\n              message={'Place your input here:'}\n              values={values}/>\n          </div>\n          <div className=\"answer\">answer\n            <Matrix\n              displayOnly={true}\n              message={'Your answer:'}\n              values={finalAnswer}/>\n          </div>\n        </div>\n        <div className=\"shownWork\">\n          Shown Work:{this.shownWork}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}